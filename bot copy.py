import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
from datetime import datetime, timedelta

from config import TOKEN
#api_key = '070bade5b4a6b3a83e490c432173d763'

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ INFO
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot_token = TOKEN
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)




















# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class WeatherStates(StatesGroup):
    waiting_for_city = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–∞—Ä—Å–µ–ª–æ–Ω—ã
    weather_data = get_weather("Barcelona")

    if weather_data:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_weather = format_weather(weather_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await message.answer(formatted_weather)
    else:
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
def get_weather(city):
    api_key = '070bade5b4a6b3a83e490c432173d763'
    url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric'

    response = requests.get(url)
    data = response.json()

    if data['cod'] == '200':
        return data['list']
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def format_weather(weather_data):
    formatted_weather = ""
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –∏ –Ω—É–∂–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    tomorrow_weather = [weather for weather in weather_data if weather['dt_txt'].startswith(tomorrow) and weather['dt_txt'].endswith(('09:00:00', '15:00:00', '21:00:00'))]

    for weather in tomorrow_weather:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥–µ
        time = get_time_period(weather['dt_txt'])
        temperature = round(weather['main']['temp'])
        humidity = weather['main']['humidity']
        description = weather['weather'][0]['description']
        wind_direction, wind_arrow = get_wind_direction(weather['wind']['deg'])
        emoji = get_weather_emoji(description)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–æ–≥–æ–¥–æ–π
        formatted_weather += f"{time}, {emoji}, üå°Ô∏è +{temperature}¬∞C, –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, {wind_direction}\n"

    return formatted_weather

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
def get_time_period(dt_txt):
    time = dt_txt.split(' ')[1]

    if time == '09:00:00':
        return '–£—Ç—Ä–æ'
    elif time == '15:00:00':
        return '–î–µ–Ω—å'
    elif time == '21:00:00':
        return '–í–µ—á–µ—Ä'

    return ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ –∏ —Å—Ç—Ä–µ–ª–∫–∏
def get_wind_direction(deg):
    if 337.5 <= deg < 22.5:
        return '–°–µ–≤–µ—Ä–Ω—ã–π', '‚Üë'
    elif 22.5 <= deg < 67.5:
        return '–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '‚Üó'
    elif 67.5 <= deg < 112.5:
        return '–í–æ—Å—Ç–æ—á–Ω—ã–π', '‚Üí'
    elif 112.5 <= deg < 157.5:
        return '–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '‚Üò'
    elif 157.5 <= deg < 202.5:
        return '–Æ–∂–Ω—ã–π', '‚Üì'
    elif 202.5 <= deg < 247.5:
        return '–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '‚Üô'
    elif 247.5 <= deg < 292.5:
        return '–ó–∞–ø–∞–¥–Ω—ã–π', '‚Üê'
    elif 292.5 <= deg < 337.5:
        return '–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '‚Üñ'

    return '', ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather_emoji(description):
    emojis = {
        'clear sky': '‚òÄÔ∏è',
        'light rain': 'üåßÔ∏è',
        'scattered clouds': '‚õÖ',
        'broken clouds': '‚òÅÔ∏è',
        'overcast clouds': '‚òÅÔ∏è',
        'moderate rain': 'üåßÔ∏è',
        'few clouds': 'üå§Ô∏è'
    }

    return emojis.get(description, '')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)